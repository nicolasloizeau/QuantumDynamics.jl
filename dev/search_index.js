var documenterSearchIndex = {"docs":
[{"location":"heisenberg/#Heisenberg-time-evolution-example","page":"Heisenberg time evolution","title":"Heisenberg time evolution example","text":"","category":"section"},{"location":"heisenberg/","page":"Heisenberg time evolution","title":"Heisenberg time evolution","text":"Time evolve X in the transverse field Ising model using both dense matrices and TEBD.","category":"page"},{"location":"heisenberg/","page":"Heisenberg time evolution","title":"Heisenberg time evolution","text":"using ITensors, ITensorMPS\nusing QuantumDynamics\nusing LinearAlgebra\nimport PyPlot as plt\n\nN = 6\ndt = 0.1\ntmax = 20.0\nhx = 0.5\nhz = 0.0\n\n# time evolution with dense matrices\nH = Matrix(ModelsPS.ising(N, hx, hz))\nO = Matrix(ModelsPS.Z(N))\ntraceO0(Ot) = tr(Matrix{Complex}(Ot * O))\ntimes, res = heisenberg(H, O, [traceO0], dt, tmax)\nres = real(res[1, :])\nplt.plot(times, res, label=\"dense\")\n\n\n\n# time evolution with TEBD\nsites = siteinds(\"S=1/2\", N)\nH = ModelsTEBD.ising(N, hx, hz, sites)\nO = MPO(ModelsOpSum.Z(N), sites)\ntraceO0(Ot) = tr(apply(Ot, swapprime(dag(O), 0 => 1)))\ntimes, res = heisenberg(H, O, [traceO0], dt, tmax)\nres = real(res[1, :])\nplt.plot(times, res, label=\"TEBD\")\nplt.legend()\nplt.show()","category":"page"},{"location":"#QuantumDynamics","page":"Home","title":"QuantumDynamics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumDynamics.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#QuantumDynamics.heisenberg-Tuple{Matrix, Matrix, Any, Real, Real}","page":"Home","title":"QuantumDynamics.heisenberg","text":"heisenberg(H::Matrix, O::Matrix, observables, dt::Real, tmax::Real)\n\nHeisenberg evolution with dense matrices. Evolve the operator O in the Heisenberg picture under the Hamiltonian H for a time tmax with time step dt. observables is a list of functions, which are applied to the operator O at each time step.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.heisenberg-Tuple{Vector{ITensors.ITensor}, ITensorMPS.MPO, Any, Real, Real}","page":"Home","title":"QuantumDynamics.heisenberg","text":"heisenberg(H::Vector{ITensor}, O::MPO, observables, dt::Real, tmax::Real; bd=100, cutoff=1E-8)\n\nHeisenberg evolution with MPO (TEBD). Evolve the operator O in the Heisenberg picture under the Hamiltonian H for a time tmax with time step dt. observables is a list of functions, which are applied to the operator O at each time step. H is a list of ITensors representing the Hamiltonian terms.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.X-Tuple{Any}","page":"Home","title":"QuantumDynamics.ModelsPS.X","text":"X(N), Y(N), Z(N)\n\nTotal X, Y, Z operators for a system of size N.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.XXX_ts-Tuple{Any}","page":"Home","title":"QuantumDynamics.ModelsPS.XXX_ts","text":"XXX_ts(N)\n\n1D XXX model H= sum_j=1^N ( X_j X_j+1 + Y_j Y_j+1 + Z_j Z_j+1) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.XXZ_ts-Tuple{Any, Any}","page":"Home","title":"QuantumDynamics.ModelsPS.XXZ_ts","text":"XXZ_ts(N, delta)\n\n1D XXZ model H= sum_j=1^N ( X_j X_j+1 + Y_j Y_j+1 + Delta Z_j Z_j+1) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.XX_ts-Tuple{Any}","page":"Home","title":"QuantumDynamics.ModelsPS.XX_ts","text":"XX_ts(N)\n\n1D XX model H= sum_j=1^N ( X_j X_j+1 +  Y_j Y_j+1 ) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.XYZ_ts-Tuple{Any, Any, Any}","page":"Home","title":"QuantumDynamics.ModelsPS.XYZ_ts","text":"XYZ_ts(N, deltay, deltaz)\n\n1D XYZ model H= sum_j=1^N ( X_j X_j+1 + Delta_Y Y_j Y_j+1 + Delta_Z Z_j Z_j+1) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.XY_ts-Tuple{Any, Any}","page":"Home","title":"QuantumDynamics.ModelsPS.XY_ts","text":"XY_ts(N, delta)\n\n1D XY model H= sum_j=1^N ( X_j X_j+1 +  Delta Y_j Y_j+1 ) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsPS.ising_ts-Tuple{Any, Any, Any}","page":"Home","title":"QuantumDynamics.ModelsPS.ising_ts","text":"ising_ts(N, hx, hz)\n\nHamiltonian for the 1D Ising model with periodic boundary conditions. H= sum_j=1^N ( Z_j Z_j+1 + h_x X_j + h_z Z_j) Returns a OperatorTS1D object.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsOpSum.ising-Tuple{Any, Any, Any}","page":"Home","title":"QuantumDynamics.ModelsOpSum.ising","text":"ising(N, hx, hz)\n\nHamiltonian for the 1D Ising model with periodic boundary conditions. H= sum_j=1^N ( Z_j Z_j+1 + h_x X_j + h_z Z_j)\n\n\n\n\n\n","category":"method"},{"location":"#QuantumDynamics.ModelsTEBD.ising-NTuple{4, Any}","page":"Home","title":"QuantumDynamics.ModelsTEBD.ising","text":"ising(N, hx, hz, sites)\n\nHamiltonian for the 1D Ising model with periodic boundary conditions. H= sum_j=1^N ( Z_j Z_j+1 + h_x X_j + h_z Z_j)\n\n\n\n\n\n","category":"method"}]
}
